# coding:utf-8
# Created by: Jiaming
# Created at: 2020-05-10

# 给你一个整数数组 arr 。
#
# 现需要从数组中取三个下标 i、j 和 k ，其中 (0 <= i < j <= k < arr.length) 。
#
# a 和 b 定义如下：
#
# a = arr[i] ^ arr[i + 1] ^ ... ^ arr[j - 1]
# b = arr[j] ^ arr[j + 1] ^ ... ^ arr[k]
# 注意：^ 表示 按位异或 操作。
#
# 请返回能够令 a == b 成立的三元组 (i, j , k) 的数目。
#
# 来源：力扣（LeetCode）
# 链接：https://leetcode-cn.com/problems/count-triplets-that-can-form-two-arrays-of-equal-xor
# 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

from typing import *


class Solution:
    def countTriplets(self, arr: List[int]) -> int:
        # 周赛第2题, 写了一个O(n^3)的方法。^_^
        # 思路，把i,j,k遍历一遍，求a和b的值，相等+1
        # res = 0
        # for i in range(len(arr) - 1):
        #     left = arr[i]
        #     for j in range(i + 1, len(arr)):
        #         left ^= arr[j]
        #         right = arr[j]
        #         for k in range(j, len(arr)):
        #             right ^= arr[k]
        #             if left == right:
        #                 res += 1
        # return res
        # 优化到O(n^2)
        # 由于a==b时 a^b==0,
        # 那么问题变成遍历i和k,当arr[i] arr[k]之间的数字异或等于0
        if len(arr)<2:
            return 0
        res = 0
        for i in range(len(arr)-1):
            temp = arr[i]
            for k in range(i+1, len(arr)):
                temp ^= arr[k]
                if temp == 0:
                    res += k-i
        return res


if __name__ == "__main__":
    s = Solution()
    print(s.countTriplets([2, 3, 1, 6, 7]))
    print(s.countTriplets([7, 11, 12, 9, 5, 2, 7, 17, 22]))
    print(s.countTriplets([1, 1, 1, 1, 1]))
    print(s.countTriplets([2, 3]))
    print(s.countTriplets([1, 3, 5, 7, 9]))
    print(s.countTriplets(
        [723, 875, 440, 136, 304, 271, 63, 294, 281, 169, 432, 185, 265, 758,
         1023,
         760, 263, 13, 266, 458, 192, 774, 966, 855, 145, 115, 226, 233, 11,
         710,
         717, 281, 980, 386, 598, 564, 98, 604, 574, 717, 243, 309, 454, 676,
         866,
         944, 210, 301, 511, 700, 835, 696, 507, 794, 737, 999, 262, 36, 290,
         981,
         759, 52, 707, 734, 29, 273, 268, 853, 601, 293, 892, 66, 830, 145, 943,
         959, 16, 989, 973, 609, 428, 289, 141, 985, 852, 974, 154, 522, 656,
         894,
         494, 520, 998, 934, 64, 967, 903, 708, 323, 927, 732, 878, 434, 972,
         638,
         550, 88, 805, 893, 514, 383, 686, 977, 165, 884, 691, 455, 39, 480,
         698,
         858, 400, 714, 230, 556, 566, 26, 851, 841, 240, 953, 938, 19, 385,
         402,
         931, 561, 502, 967, 104, 943, 948, 27, 248, 227, 677, 582, 541, 91,
         703,
         740, 871, 387, 788, 663, 210, 581, 335, 778, 514, 264, 538, 786, 369,
         611,
         349, 830, 246, 968, 152, 848, 471, 647, 488, 879, 900, 235, 726, 573,
         200,
         757, 236, 537, 420, 957, 793, 164, 120, 220, 276, 456, 772, 716, 112,
         700,
         40, 660, 498, 870, 559, 329, 411, 210, 783, 989, 732, 257, 988, 733,
         743,
         58, 8, 50, 266, 312, 461, 245, 849, 932, 758, 338, 62, 364, 474, 182,
         680,
         542, 201, 727, 782, 473, 567, 1006, 39, 969, 575, 502, 788, 738, 297,
         971,
         499, 568]))
